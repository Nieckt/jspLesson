1创建项目
	项目类型 1javase项目   2javaee项目
2编码阶段
	编码+添加依赖的jar包+TOMCAT配置
3编译项目
	jdk的javac
4运行项目（找到项目的main方法）
	jdk的java命令
5打包发布

MAVEN融合了五个阶段（依赖jar）
MAVEN之所以那么大是因为里面包含了经常使用的jar包

MAVEN安装原理
	1.jar包下载太过分散导致 开发人员开发周期延长 maven提供了中央仓库将所有的jar包聚合在一起
	2.央仓库计算网络资源有限 各地出现了各自的私服 降低中心服务器的压力 开发者就近原则获取最近的私服 下载jar包
	3.本地项目开发如果需要下载jar包 必须依赖maven软件 maven软件需要配置私服地址 配置本地缓存jar包地址

安装MAVEN步骤
	1.修改仓库地址：先把默认指向apache
		局域网地址
		<mirror>  
	      <id>test</id>  
	      <name>central</name>                                                                                                                         
	      <url>http://192.168.1.13:8081/repository/aliyun/</url> 
	      <mirrorOf>central</mirrorOf>  
	    </mirror>
	             私服地址：id跟name可以随便给
		central：意思是中心仓库，表示用私服替换中心仓库（不能动）
	    <mirror>
	      <id>ali+maven</id>
	      <name>aliyun maven</name>
	      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
	      <mirrorOf>central</mirrorOf>        
	    </mirror>
	2.本地jar包存储的位置（本地仓库用于缓存项目的jar包）
		resp\目录结构跟网上的目录结构是一样的（维持了网络的目录结构）
		conf\setting.xml
			-<localRepository>resp的路径</localRepository>
		resp就是本地仓库

MAVEN环境变量
	把bin目录配置在Path环境变量
		mvn -version查看环境变量配置是否成功（如果现实maven信息就表示成功）
	只要有pom.xml文件就是MAVEN项目
	-src文件
		-src\main工程源代码目录
			-src\main\java工程java源代码目录
			-src\main\resource工程的资源目录
			-src\main\webapp web资源文件
		-src\test单元测试目录
			-src\test\java
	-target输出目录，所有的输出物都存放在这个目录下
		-target\classes编译之后的class文件
	-pom.xml
	
执行命令（SUCCESS编译成功  FAILURE编译失败）
	mvn archetype:generate创建maven项目
	在执行过程中Downloading执行路径是我们之前配置好的阿里云私服路径
	没有定义项目类型：
	Cheose archer（以下类型可供选择）
		1.简单的java项目
		2.javaee项目
		3.简单的MAVEN插件开发
		4.MAVEN插件的文档项目
		5.JSR-268一种门户导入的信息组件
		7.快速生成一个java项目（常用）
		8.帮组文档的一个项目
		10.javawab项目
	默认选7
	
	<dependency>
		<groupId>公司名（cn.easytop）</groupId>
		<artifactId>项目名</artifactId>
		<version>版本号</versiom>(默认版本号1.0)
	</dependency>
	SNAPSHOT（开发阶段（不稳定的））
	RELEASE (发布阶段（稳定）)
	
	mvn compile:编译源代码
	
	mvn package：依据项目生成jar文件
	
	运行jar包（必须是编译后的文件）：java -cp target/text-1.0-SNAPSHOT.jar cn.et.App
	
	mvn建war项目步骤 
	
	1.mvn archetype:generate选择Wabapp新建web项目  在项目文件夹下
	
	2.mvn package：依据项目生成jar文件 	
	
	3.mvn tomcat：run启动tomcat	在target文件目录下
	
	4.在浏览器中输入localhost：8080/上下文路径/文件名
	
--------------------------------------------------------------
	
	其他命令
		mvn install 在本地Repository中安装jar
		mvn deploy 将jar包发布到远程仓库

MAVEN导入方法
	window-->preferences-->Installations-->add-->根目录路径-->user Settings-->settings.xml文件
	
eclipse新建jar的maven项目运行时配置快捷方式
	在该项目上右键new
	
eclipse新建wer项目是会报错
	解决方案是在项目上右键在java EE Tools的下拉框中选择Generate Deployment Descriptor Stub
	（The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path）
	新建jsp文件时报错，是因为javaee的库不包含在jdk里面，没有关联tomcat
	解决方案：window-->preferences-->Runtime Environme-->2.在该项目上右键-->build Path-->configure Build Path-->Add Library-->Server Runtime
	
※pom.xml文件（是整个maven文件的灵魂）※
<modelVersion>4.0.0</modelVersion> 表示maven的pom类型版本
pom项目对象模型，就是做对象工程管理

<groupId></groupId> 公司名   (schema定义标签的有空了解一下)
<artifactId></artifactId> 项目名称
<version></version> 版本号
<packaging></packaging> 项目类型 jar是javase war是javaee pom一般用于定于父类

最重要的标签，依赖 当前的项目依赖哪些jar
<dependencies>
	这种事从仓库下载jar包
	<dependency>
		<groupId>公司名</groupId>
		<artifactId>项目名</artifactId>
		<version>版本号</version>
	</dependency>
	下面这种是从文件系统中寻找jar（不开源，但是提供了jar包）
	<dependency>
		<groupId></groupId>
		<artifactId></artifactId>
		<version></version>
		上面三个里面内容随便填写，最好填写所引的jar包名
		<scope>作用域
			里面有几个值
			system表示从系统里面取
			其他几个是表示打jar包的时候加不加入到里面去
			※scope的意义
				compile：默认的scope。任何定义在compile scope下的依赖将会在所有的class paths下可用。maven工程会将其打包到最终的arifact中。如果你构建一个war类型的artefact，那么在compile scope下引用的JAR文件将会被收集到WAR文件内。
				provided：这个Scope假定对应的依赖会由运动这个应用的JDK或者容器来提供。最好的例子就是servlet API。任何provided scope下定义的依赖在构建是的类路径里是可用的，但是不会被打包到最终的artifact中。如果WAR的文件，servlet API在构建是的类路径是可用的，但是并不会被带包到WAR文件中
				system：于provided scope很想，唯一的区别在于，在system scope中，你需要告诉Maven如何去找到这个依赖。如果你要引用的依赖在maven仓库中不存在时，就可以用这个scope。不推荐使用system依赖。
		</scope>
		<systemPath>本地路径+包名</systemPath>
	</dependency>
</dependencies> 

※MAVEN强大之处就是你引用的项目依赖其他JAR包它会自动加载所依赖的JAR包，自动把源代码下载下来

插件
mavenc插件 表示在maven
<build>
	<plugins>
		<plugin>
			<groupId>公司名（cn.easytop）</groupId>
			<artifactId>项目名</artifactId>
			<version>版本号</versiom>(默认版本号1.0)
			<configuration>
				<prot>端口号</prot>
				<uriEncoding>字符集编号</uriEncoding>
			</configuration>
		</plugin>
	</plugins>
</build>

pom项目统一子项目版本
父项目不会引JAR包，只是定义所有版本的信息
//当键设置版本号  内容当值
<propeties>
	<fileupload-version>版本号</fileupload-version>
	<mysql-version>版本号</mysql-version>
</properties>

<dependencyManagement>
	<dependencies>
		<groupId>公司名（cn.easytop）</groupId>
		<artifactId>项目名</artifactId>
		<version>${mysql-version}</versiom>(默认版本号1.0)
	</dependencies>
</dependencyManagement>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>cn.et</groupId>
  <artifactId>upload-common</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  
  <!-- 定义所有的版本信息 子项目可以选择性加载 适合做框架开发（建议使用） -->
  <properties>
  	//统一确定版本号
  	<fileupload-version>1.3.2</fileupload-version>
  	<mysql-version>5.1.38</mysql-version>
  </properties>
  
  <dependencies>
	<dependency>
		<groupId>commons-fileupload</groupId>
		<artifactId>commons-fileupload</artifactId>
		<version>${fileupload-version}</version>
	</dependency>
  </dependencies>
  
  <dependencyManagement>
  	<dependencies>
  		<dependency>
  			<groupId>commons-fileupload</groupId>
  			<artifactId>commons-fileupload</artifactId>
  			<version>${fileupload-version}</version>
  		</dependency>
  		<dependency>
		  <groupId>Mysql</groupId>
		  <artifactId>mysql-connector-java</artifactId>
		  <version>${mysql-version}</version>
		</dependency>
  	</dependencies>
  </dependencyManagement>
</project>

子项目中 parent表示继承
需要引入父项目的
	<groupId>cn.et</groupId>
	<artifactId>upload-common</artifactId>
    <version>0.0.1-SNAPSHOT</version>

 <!-- parent表示继承 -->
  <parent>
  	<groupId>cn.et</groupId>
    <artifactId>upload-common</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <dependencies>
  	//只需引入父项目中的公司名 项目名就行了  版本号父项目已经确定好了
  	<dependency>
  		<groupId>commons-fileupload</groupId>
  		<artifactId>commons-fileupload</artifactId>
  	</dependency>	
  	<dependency>
  		<groupId>Mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
  	</dependency>
  </dependencies>

















	